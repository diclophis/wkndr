diff --git a/src/raylib.h b/src/raylib.h
index 4359147a..92dd91cb 100644
--- a/src/raylib.h
+++ b/src/raylib.h
@@ -1354,6 +1354,7 @@ RLAPI RayHitInfo GetCollisionRayGround(Ray ray, float groundHeight);
 // Shader loading/unloading functions
 RLAPI Shader LoadShader(const char *vsFileName, const char *fsFileName);  // Load shader from files and bind default locations
 RLAPI Shader LoadShaderCode(const char *vsCode, const char *fsCode);      // Load shader from code strings and bind default locations
+RLAPI Shader LoadShaderCodeX(const char **vsCode, const char **fsCode);      // Load shader from code strings and bind default locations
 RLAPI void UnloadShader(Shader shader);                                   // Unload shader from GPU memory (VRAM)
 
 RLAPI Shader GetShaderDefault(void);                                      // Get default shader
diff --git a/src/rlgl.h b/src/rlgl.h
index 447227fb..6f533ea2 100644
--- a/src/rlgl.h
+++ b/src/rlgl.h
@@ -515,6 +515,7 @@ RLAPI unsigned int rlLoadAttribBuffer(unsigned int vaoId, int shaderLoc, void *b
 // Functions Declaration - rlgl functionality
 //------------------------------------------------------------------------------------
 RLAPI void rlglInit(int width, int height);           // Initialize rlgl (buffers, shaders, textures, states)
+RLAPI bool rlglIsNewer();           // Initialize rlgl (buffers, shaders, textures, states)
 RLAPI void rlglClose(void);                           // De-inititialize rlgl (buffers, shaders, textures)
 RLAPI void rlglDraw(void);                            // Update and draw default internal buffers
 
@@ -559,6 +560,7 @@ RLAPI void rlUnloadMesh(Mesh mesh);                                       // Unl
 // Shader loading/unloading functions
 RLAPI Shader LoadShader(const char *vsFileName, const char *fsFileName);  // Load shader from files and bind default locations
 RLAPI Shader LoadShaderCode(const char *vsCode, const char *fsCode);      // Load shader from code strings and bind default locations
+RLAPI Shader LoadShaderCodeX(const char **vsCode, const char **fsCode);      // Load shader from code strings and bind default locations
 RLAPI void UnloadShader(Shader shader);                                   // Unload shader from GPU memory (VRAM)
 
 RLAPI Shader GetShaderDefault(void);                                      // Get default shader
@@ -901,6 +903,7 @@ static PFNGLDELETEVERTEXARRAYSOESPROC glDeleteVertexArrays;  // Entry point poin
 //----------------------------------------------------------------------------------
 #if defined(GRAPHICS_API_OPENGL_33) || defined(GRAPHICS_API_OPENGL_ES2)
 static unsigned int CompileShader(const char *shaderStr, int type);     // Compile custom shader and return shader id
+static unsigned int CompileShaderX(const char **shaderStr, int type);     // Compile custom shader and return shader id
 static unsigned int LoadShaderProgram(unsigned int vShaderId, unsigned int fShaderId);  // Load custom shader program
 
 static Shader LoadShaderDefault(void);                  // Load default shader (just vertex positioning and texture coloring)
@@ -1524,6 +1527,11 @@ void rlUpdateBuffer(int bufferId, void *data, int dataSize)
 // Module Functions Definition - rlgl Functions
 //----------------------------------------------------------------------------------
 
+bool rlglIsNewer() {
+  const GLubyte *glslVersion = glGetString(GL_SHADING_LANGUAGE_VERSION);
+  return ((strstr((const char*)glslVersion, "ES 1") == NULL));
+}
+
 // Initialize rlgl: OpenGL extensions, default buffers/shaders/textures, OpenGL states
 void rlglInit(int width, int height)
 {
@@ -3097,6 +3105,66 @@ Shader LoadShaderCode(const char *vsCode, const char *fsCode)
     return shader;
 }
 
+// Load shader from code strings of strings
+// NOTE: If shader string is NULL, using default vertex/fragment shaders
+Shader LoadShaderCodeX(const char **vsCode, const char **fsCode)
+{
+    Shader shader = { 0 };
+    shader.locs = (int *)RL_CALLOC(MAX_SHADER_LOCATIONS, sizeof(int));
+
+    // NOTE: All locations must be reseted to -1 (no location)
+    for (int i = 0; i < MAX_SHADER_LOCATIONS; i++) shader.locs[i] = -1;
+
+#if defined(GRAPHICS_API_OPENGL_33) || defined(GRAPHICS_API_OPENGL_ES2)
+    unsigned int vertexShaderId = RLGL.State.defaultVShaderId;
+    unsigned int fragmentShaderId = RLGL.State.defaultFShaderId;
+
+    if (vsCode != NULL) vertexShaderId = CompileShaderX(vsCode, GL_VERTEX_SHADER);
+    if (fsCode != NULL) fragmentShaderId = CompileShaderX(fsCode, GL_FRAGMENT_SHADER);
+
+    if ((vertexShaderId == RLGL.State.defaultVShaderId) && (fragmentShaderId == RLGL.State.defaultFShaderId)) shader = RLGL.State.defaultShader;
+    else
+    {
+        shader.id = LoadShaderProgram(vertexShaderId, fragmentShaderId);
+
+        if (vertexShaderId != RLGL.State.defaultVShaderId) glDeleteShader(vertexShaderId);
+        if (fragmentShaderId != RLGL.State.defaultFShaderId) glDeleteShader(fragmentShaderId);
+
+        if (shader.id == 0)
+        {
+            TRACELOG(LOG_WARNING, "SHADER: Failed to load custom shader code");
+            shader = RLGL.State.defaultShader;
+        }
+
+        // After shader loading, we TRY to set default location names
+        if (shader.id > 0) SetShaderDefaultLocations(&shader);
+    }
+
+    // Get available shader uniforms
+    // NOTE: This information is useful for debug...
+    int uniformCount = -1;
+
+    glGetProgramiv(shader.id, GL_ACTIVE_UNIFORMS, &uniformCount);
+
+    for (int i = 0; i < uniformCount; i++)
+    {
+        int namelen = -1;
+        int num = -1;
+        char name[256]; // Assume no variable names longer than 256
+        GLenum type = GL_ZERO;
+
+        // Get the name of the uniforms
+        glGetActiveUniform(shader.id, i, sizeof(name) - 1, &namelen, &num, &type, name);
+
+        name[namelen] = 0;
+
+        TRACELOGD("SHADER: [ID %i] Active uniform (%s) set at location: %i", shader.id, name, glGetUniformLocation(shader.id, name));
+    }
+#endif
+
+    return shader;
+}
+
 // Unload shader from GPU memory (VRAM)
 void UnloadShader(Shader shader)
 {
@@ -3835,6 +3903,41 @@ void EndVrDrawing(void)
 //----------------------------------------------------------------------------------
 
 #if defined(GRAPHICS_API_OPENGL_33) || defined(GRAPHICS_API_OPENGL_ES2)
+// Compile custom shader and return shader id
+static unsigned int CompileShaderX(const char **shaderStr, int type)
+{
+    unsigned int shader = glCreateShader(type);
+    glShaderSource(shader, 2, shaderStr, NULL);
+
+    GLint success = 0;
+    glCompileShader(shader);
+    glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
+
+    if (success != GL_TRUE)
+    {
+        TRACELOG(LOG_WARNING, "SHADER: [ID %i] Failed to compile shader code", shader);
+        int maxLength = 0;
+        int length;
+        glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &maxLength);
+
+#if defined(_MSC_VER)
+        char *log = RL_MALLOC(maxLength);
+#else
+        char log[maxLength];
+#endif
+        glGetShaderInfoLog(shader, maxLength, &length, log);
+
+        TRACELOG(LOG_WARNING, "SHADER: [ID %i] Compile error: %s", shader, log);
+
+#if defined(_MSC_VER)
+        RL_FREE(log);
+#endif
+    }
+    else TRACELOG(LOG_INFO, "SHADER: [ID %i] Compiled successfully", shader);
+
+    return shader;
+}
+
 // Compile custom shader and return shader id
 static unsigned int CompileShader(const char *shaderStr, int type)
 {
