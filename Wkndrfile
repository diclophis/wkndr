#

include ECS

Wkndr.nonce {
  #srand(Time.now.to_f * 1000.0)

  Wkndr.client_side { |gl|
    @store = StorageManager.new
    @transformer = TransformerSystem.new(@store)
    @exhaust = ExhaustSystem.new(@store, 0.025, @particleBitmap, @particleLayer)
    @movement = MovementSystem.new(@store)
    @exhaust_layer = @store.watch(ExhaustComponent, PositionComponent, RandomColorComponent)
    @hunter_layer = @store.watch(HunterComponent, PositionComponent, RandomColorComponent)
    @last_l = 0
    @color = RandomColorComponent.new

    gl.open_default_view!

    @spawn_proc = Proc.new { |r, x, y, c|
      @store.add(
        HunterComponent.new(r),
        PositionComponent.new(x, y, 0),
        VelocityComponent.from_angle(r * 2.0 * 3.14).mul(500.0),
        SpriteComponent.new,
        TransformComponent.new(1.0),
        RandomColorComponent.from_color(c)
      )
    }
  }
}


Wkndr.client_side { |gl|
  gl.event { |channel, msg|
    case channel
      when "spawn"
        @spawn_proc.call(*msg)
    end
  }

  gl.update { |global_time, delta_time, sw, sh|
    gl.mousep { |xyl|
      x, y, l = *xyl

      if (l == 1 && @last_l == 0)
        spawn_proc_args = [
          rand,
          x,
          y,
          @color.color
        ]

        @spawn_proc.call(*spawn_proc_args)
        gl.emit({"spawn" => spawn_proc_args})
      end

      @last_l = l
    }

    gl.drawmode {
      gl.twod {
        @exhaust_layer.each { |e, _x, p, c|
          gl.draw_circle(10.0, p.x, p.y, p.z, *c.color)
        }

        @hunter_layer.each { |e, _h, p, c|
          gl.draw_circle(20.0, p.x, p.y, p.z, *c.color)
        }

        #gl.button(15.0, 15.0, 50.0, 20.0, "  #{@store.count} #{"%0.2f" % (1.0 / delta_time)} fps  ") {
        #  #gl.emit({"c" => "tty"})
        #}
      }
    }

    @transformer.process(global_time, delta_time)
    @exhaust.process(global_time, delta_time)
    @movement.process(global_time, delta_time)

    #if @store.count == 0 # && 
    if rand < 0.001
      spawn_proc_args = [
        rand,
        sw * 0.5,
        sh * 0.5,
        @color.color
      ]
      @spawn_proc.call(*spawn_proc_args)
      gl.emit({"spawn" => spawn_proc_args})
    end

  }
}

$ticks = 1

Wkndr.server_side { |gl, server|
  gl.update { |gt, dt|
    $ticks += 1
  }

  server.wsb("/") do |cn, phr|
  end

  server.raw("/status") do |cn, phr|
    Protocol.ok("ONLINE\n") #TODO: present SHA1 of existing code somehow?????
  end

  server.raw("/about") do |cn, phr|
    mab = Markaby::Builder.new
    mab.html5 "lang" => "en" do
      mab.head do
        mab.title "about"
      end

      mab.body do
        mab.h1 "what is wkndr"
        mab.p "it is a new hypertext application platform"
      end
    end
    Protocol.ok(mab.to_s)
  end

  server.live("/sevengui", "wkndr sevengui") do |cn, phr, mab|
    mab.a(:href => "/sevengui") do
      mab.h1 "sevengui example"
    end

    mab.ul do
      mab.li do
        "cheese foo #{Time.now} #{$ticks}"
      end
    end
  end
}

#        gl.mousep { |xyl|
#          x, y, l = *xyl
#
#          if (l == 1 && @last_l == 0) #&& (@store.count < 200)
#          #if (l == 1)
#            (3).times { |i|
#              @store.add(
#                HunterComponent.new,
#                PositionComponent.new(x, y, 0),
#                #VelocityComponent.from_angle(rand * 2.0 * 3.14).mul(500.0),
#                VelocityComponent.from_angle(((2.0 * 3.14) / 3.0) * i).mul(500.0),
#                SpriteComponent.new,
#                TransformComponent.new(1.0),
#                RandomColorComponent.new
#              )
#            }
#          end
#
#          @last_l = l
#        }
#
#        @exhaust_layer.each { |e, _x, p, c|
#          gl.draw_circle(10.0, p.x, p.y, p.z, *c.color)
#        }
#
#        @hunter_layer.each { |e, _h, p, c|
#          gl.draw_circle(20.0, p.x, p.y, p.z, *c.color)
#        }
#
#        gl.button(15.0, 15.0, 50.0, 20.0, "  #{@store.count} #{"%0.2f" % (1.0 / delta_time)} fps  ") {
#          #gl.emit({"c" => "tty"})
#        }

#    @transformer.process(global_time, delta_time)
#    @exhaust.process(global_time, delta_time)
#    @movement.process(global_time, delta_time)
