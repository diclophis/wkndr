# vi:syntax=ruby

Wkndr.nonce {
  $ticks = 0

  Wkndr.client_side { |gl|
    gl.open_default_view!
  }

  Wkndr.server_side { |gl, server|
    Wkndr.timer(24) {
      $ticks += 1

      server.delta("/sevengui") {
        true
      }
    }
  }
}


#Wkndr.client_side { |gl|
#  gl.update { |global_time, delta_time, sw, sh|
#    gl.drawmode {
#      gl.threed {
#        gl.lookat(1, 45.0, 3.0, 45.0, 0.0, 0.1, 0.0, 50.0)
#      }
#      gl.twod {
#        gl.draw_circle(10.0, 20, 20, 20, 1.0, 0.0, 0.1, 0.5)
#      }
#    }
#  }
#}


Wkndr.client_side { |gl|
  store = StorageManager.new
  a = Cube.new(gl, 10.0, 10.0, 10.0, 10.0)
  batcher = CubicBatchingSystem.new(store, a, 1)

  gl.update { |global_time, delta_time, sw, sh|
    gl.drawmode {
      gl.threed {
        gl.lookat(1, 45.0, 3.0, 45.0, 0.0, 0.1, 0.0, 50.0)
        batcher.at(0).deltap(0, 0, 0)
        batcher.at(0).deltar(1, 0, 0, global_time * 100.0)
        batcher.draw(1)
      }
    }
  }
}


Wkndr.server_side { |gl, server|
  server.wsb("/") do |cn, phr|
  end

  server.raw("/status") do |cn, phr|
    Protocol.ok("ONLINE\n") #TODO: present SHA1 of existing code somehow?????
  end

  # live urls are canonical subscription connection strings
  # all connected users recieve updates when input delta occurs
  # mechanism TBD
  server.live("/sevengui", "wkndr sevengui") { |cn, phr, mab|
    # cn  ??????
    # phr = client connection
    # mab = html string builder DSL
    mab.a(:href => "/sevengui") do
      mab.h1 "sevengui example"
    end

    mab.ul do
      mab.li do
        "bap bar: " + cn.session["gt"].inspect
      end
      $ticks.times do |i|
        mab.li do
          i
        end
      end
    end
  }

  server.raw("/about") do |cn, phr|
    #raise "Server First Error"

    mab = Markaby::Builder.new
    mab.html5 "lang" => "en" do
      mab.head do
        mab.title "about"
      end

      mab.body do
        mab.h1 "what is wkndr"
        mab.p "it is a new hypertext application platform"
        mab.a "href" => "/" do
          "//////"
        end
      end
    end
    Protocol.ok(mab.to_s)
  end
}
