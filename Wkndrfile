#

include ECS

Wkndr.nonce {
  Wkndr.client_side { |gl|
    @store = StorageManager.new
    @transformer = TransformerSystem.new(@store)
    @exhaust = ExhaustSystem.new(@store, 0.025, @particleBitmap, @particleLayer)
    @movement = MovementSystem.new(@store)
    @exhaust_layer = @store.watch(ExhaustComponent, PositionComponent, RandomColorComponent)
    @hunter_layer = @store.watch(HunterComponent, PositionComponent, RandomColorComponent)
    @last_l = 0
    @color = RandomColorComponent.new

    gl.open_default_view!
    gl.lookat(1, 11.0, 7.0, 13.0, 0.0, 0.0, 0.01, 15.0)

    @spawn_proc = Proc.new { |r, x, y, c|
      @store.add(
        HunterComponent.new(r),
        PositionComponent.new(x, y, 0),
        VelocityComponent.from_angle(r * 2.0 * 3.14).mul(500.0),
        SpriteComponent.new,
        TransformComponent.new(1.0),
        RandomColorComponent.from_color(c)
      )
    }

    @cubes = []
    @cubes << Cube.new(0.13, 0.70, 0.15, 1.00)
    @cubes << Cube.new(0.17, 0.30, 0.90, 1.00)
    @cubes << Cube.new(1.10, 0.19, 0.40, 1.00)

    chicken_file = "resources/ayam4.obj"
    @chicken = Model.new(chicken_file, "", 2.5)
  }

  Wkndr.server_side { |gl|
    @ticks = 0
  }
}

Wkndr.client_side { |gl|
  gl.event { |channel, msg|
    case channel
      when "spawn"
        @spawn_proc.call(*msg) if (@spawn_proc && @store)
    end
  }

  gl.update { |global_time, delta_time, sw, sh|
    gl.mousep { |xyl|
      x, y, l = *xyl

      if (l == 1 && @last_l == 0)
        spawn_proc_args = [
          rand,
          x,
          y,
          @color.color
        ]

        @spawn_proc.call(*spawn_proc_args)
        gl.emit({"spawn" => spawn_proc_args})
      end

      @last_l = l
    }

    gl.drawmode {
      speed = 100.0 + (global_time * 0.1)

      gl.threed {
        @cubes.each_with_index { |cube,i|
          cube.deltar(Math.cos((i+1)*-global_time), Math.sin((i+1) * global_time), 1.0, global_time * speed)
          @chicken.deltar(Math.cos((i+1)*-global_time), Math.sin((i+1) * global_time), 1.0, global_time * speed)
          #cube.draw(false)
        }

        @chicken.draw(false)
      }

      gl.twod {
        gl.label("#{speed} #{'%2.2f' % (((delta_time * 1000.0) / (1000.0 / 60.0)) * 100.0)} #{'%.2f' % global_time}")

        @exhaust_layer.each { |e, _x, p, c|
          gl.draw_circle(10.0, p.x, p.y, p.z, *c.color)
        }

        @hunter_layer.each { |e, _h, p, c|
          gl.draw_circle(20.0, p.x, p.y, p.z, *c.color)
        }
      }
    }

    @transformer.process(global_time, delta_time)
    @exhaust.process(global_time, delta_time)
    @movement.process(global_time, delta_time)

    ##if @store.count == 0 # && 
    #if rand < 0.1
    #  spawn_proc_args = [
    #    rand,
    #    sw * 0.5,
    #    sh * 0.5,
    #    @color.color
    #  ]
    #  @spawn_proc.call(*spawn_proc_args)
    #  gl.emit({"spawn" => spawn_proc_args})
    #end
  }
}

#$ticks = 1

#@server_sided ||= 0
#@server_sided += 1

Wkndr.server_side { |gl, server|

#raise "wtf" if @server_sided > 1

  sven_gui = Proc.new { |cn, phr, mab|
    mab.a(:href => "/sevengui") do
      mab.h1 "sevengui example"
    end

    mab.ul do
      mab.li do
        "bap bar: " + cn.session["gt"].inspect
      end
    end
  }

  gl.update { |gt, dt|
    #$ticks += 1
    #if $ticks > 2
    #  $ticks = 0
    #@gt = gt
    #@dt = dt
    #@ticks += 1

    #server.all_connections.each { |cn|
    #  cn.session["gt"] = gt
    #}

    #server.live("/sevengui", "wkndr sevengui", &sven_gui)
  }

  server.wsb("/") do |cn, phr|
  end

  server.raw("/status") do |cn, phr|
    Protocol.ok("ONLINE\n") #TODO: present SHA1 of existing code somehow?????
  end


  server.raw("/about") do |cn, phr|
    mab = Markaby::Builder.new
    mab.html5 "lang" => "en" do
      mab.head do
        mab.title "about"
      end

      mab.body do
        mab.h1 "what is wkndr"
        mab.p "it is a new hypertext application platform"
      end
    end
    Protocol.ok(mab.to_s)
  end

  server.live("/sevengui", "wkndr sevengui", &sven_gui)
}
